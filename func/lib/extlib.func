;;
;;  btn-token-smc â€“ smart contracts collection for Biton token
;;
;;  Copyright (C) 2022 BITON <https://github.com/BITONdev>
;;
;;  This file is part of btn-token-smc.
;;
;;  btn-token-smc is free software: you can redistribute it and/or modify
;;  it under the terms of the GNU General Public License as published by
;;  the Free Software Foundation, either version 3 of the License, or
;;  (at your option) any later version.
;;
;;  btn-token-smc is distributed in the hope that it will be useful,
;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;  GNU General Public License for more details.
;;
;;  You should have received a copy of the GNU General Public License
;;  along with btn-token-smc.  If not, see <https://www.gnu.org/licenses/>.
;;

;;
;; extension for FunC standard library (stdlib.fc)
;;

int     extlib::1ton()                                 asm "1000000000 PUSHINT";

int     extlib::tuple_len(tuple t)                      asm "TLEN PUSHINT";
int     extlib::slice_data_equal?(slice s1, slice s2)   asm "SDEQ";
slice   extlib::empty_slice()                           asm "<b b> <s PUSHSLICE";
slice   extlib::addr_none()                             asm "<b b{00} s, b> <s PUSHSLICE";

;;  addr_std$10 anycast:(## 1) {anycast = 0}
;;      workchain_id:int8 address:bits256 = MsgAddrSmpl;
slice extlib::addrsmpl_start()  asm "<b b{100} s, b> <s PUSHSLICE";

int extlib::is_addrsmpl(slice addr) inline {
    return extlib::slice_data_equal?(
        addr.preload_bits(3),
        extlib::addrsmpl_start()
    );
}
