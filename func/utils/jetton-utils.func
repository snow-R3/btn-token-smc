int workchain() asm "0 PUSHINT";

cell pack_jwall_data(
    int balance,
    slice owner_addr,
    slice jmaster_addr,
    cell jwallet_code
) inline {
    return begin_cell()
        .store_grams(balance)
        .store_slice(owner_addr)
        .store_slice(jmaster_addr)
        .store_ref(jwallet_code)
        .end_cell();
}

cell jwall_state_init(
    slice owner_addr,
    slice jmaster_addr,
    cell jwallet_code
) inline {
    return begin_cell()
        .store_uint(0, 2)
        .store_dict(jwallet_code)
        .store_dict(pack_jwall_data(0, owner_addr, jmaster_addr, jwallet_code))
        .store_uint(0, 1)
        .end_cell();
}

slice jwall_state_addr(cell state_init) inline {
    return begin_cell()
        .store_uint(4, 3)
        .store_int(workchain(), 8)
        .store_uint(cell_hash(state_init), 256)
        .end_cell()
        .begin_parse();
}

slice jwall_addr_by_owner(slice owner_addr, slice jmaster_addr, cell jwall_code) inline {
    return jwall_state_addr(jwall_state_init(
        owner_addr, jmaster_addr, jwall_code
    ));
}

() force_chain(slice addr) impure {
    (int wc, _) = parse_std_addr(addr);
    throw_unless(333, wc == workchain());
}
